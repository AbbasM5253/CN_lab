import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;

public class LineCoding extends JFrame implements ActionListener {
    private int x1 = 300, x2 = 300, y1 = 100, y2 = 100;
    private int[] baud;
    private JTextField inpData = new JTextField(12);
    private JTextField rcvData = new JTextField(12);
    private JComboBox<String> techniques;
    private JPanel drawPanel = new JPanel();

    public LineCoding() {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(1000, 400);
        setTitle("Line Coding Techniques....");
        initComponents();
    }

    private void initComponents() {
        JPanel topPanel = new JPanel();
        topPanel.add(new JLabel("Input Data:"));
        topPanel.add(inpData);

        String[] list = {"Unipolar-NRZ", "Bipolar-AMI", "Polar-NRZ-I", "Polar-NRZ-L", "Polar-RZ", "Manchester", "Differential Manchester"};
        techniques = new JComboBox<>(list);
        topPanel.add(new JLabel("Technique:"));
        topPanel.add(techniques);

        JButton encodeBtn = new JButton("Encode");
        JButton clrBtn = new JButton("Clear");
        topPanel.add(encodeBtn);
        encodeBtn.addActionListener(this);
        topPanel.add(clrBtn);
        clrBtn.addActionListener(this);

        drawPanel.setBackground(Color.WHITE);
        add(topPanel, BorderLayout.NORTH);
        add(drawPanel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LineCoding f = new LineCoding();
            f.setVisible(true);
        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if ("Encode".equals(e.getActionCommand())) {
            encode();
        } else if ("Clear".equals(e.getActionCommand())) {
            clearPanel();
        }
    }

    private void encode() {
        String selectedTechnique = (String) techniques.getSelectedItem();
        char[] data = inpData.getText().toCharArray();
        int dataSize = data.length;

        if ("Bipolar-AMI".equals(selectedTechnique)) {
            encodeBipolarAMI(data, dataSize);
        } else if ("Polar-RZ".equals(selectedTechnique)) {
            encodePolarRZ(data, dataSize);
        } else if ("Manchester".equals(selectedTechnique)) {
            encodeManchester(data, dataSize);
        } else if ("Unipolar-NRZ".equals(selectedTechnique)) {
            encodeUnipolarNRZ(data, dataSize);
        } else if ("Polar-NRZ-L".equals(selectedTechnique)) {
            encodePolarNRZL(data, dataSize);
        } else if ("Polar-NRZ-I".equals(selectedTechnique)) {
            encodePolarNRZI(data, dataSize);
        } else if ("Differential Manchester".equals(selectedTechnique)) {
            encodeDifferentialManchester(data, dataSize);
        }
    }

    private void encodeBipolarAMI(char[] data, int dataSize) {
        baud = new int[dataSize];
        int voltage = 50;
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[i] = voltage;
                voltage = -voltage;
            } else {
                baud[i] = 0;
            }
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodePolarRZ(char[] data, int dataSize) {
        baud = new int[dataSize * 2];
        int j = 0;
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[j] = 50;
                baud[j + 1] = 0;
                j = j + 2;
            } else {
                baud[j] = -50;
                baud[j + 1] = 0;
                j = j + 2;
            }
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodeManchester(char[] data, int dataSize) {
        baud = new int[dataSize * 2];
        int j = 0;
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[j] = 50;
                baud[j + 1] = -50;
            } else {
                baud[j] = -50;
                baud[j + 1] = 50;
            }
            j = j + 2;
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodeUnipolarNRZ(char[] data, int dataSize) {
        baud = new int[dataSize];
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[i] = 50;
            } else {
                baud[i] = 0;
            }
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodePolarNRZL(char[] data, int dataSize) {
        baud = new int[dataSize];
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[i] = 50;
            } else {
                baud[i] = -50;
            }
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodePolarNRZI(char[] data, int dataSize) {
        baud = new int[dataSize];
        int voltage = 50;
        for (int i = 0; i < dataSize; i++) {
            if (data[i] == '1') {
                voltage = -voltage;
                baud[i] = voltage;
            } else {
                baud[i] = voltage;
            }
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void encodeDifferentialManchester(char[] data, int dataSize) {
        int j = 2;
        y1 = 50;
        baud = new int[dataSize * 2];
        if (data[0] == '1') {
            baud[0] = 50;
        } else if (data[0] == '0') {
            baud[0] = -50;
        }
        baud[1] = baud[0] * (-1);
        for (int i = 1; i < dataSize; i++) {
            if (data[i] == '1') {
                baud[j] = baud[j - 1];
            } else {
                baud[j] = baud[j - 1] * (-1);
            }
            baud[++j] = baud[j - 1] * (-1);
            j++;
        }
        rcvData.setText(Arrays.toString(baud));
        draw(baud);
    }

    private void draw(int[] baud) {
        for (int i = 0; i < baud.length; i++) {
            if (baud[i] == 100 - y1) {
                y2 = y1;
                x2 = x1 + 30;
                drawPanel.getGraphics().drawLine(x1, y1, x2, y2);
            } else {
                x2 = x1;
                y2 = 100 - baud[i];
                drawPanel.getGraphics().drawLine(x1, y1, x2, y2);
                y1 = y2;
                x2 = x1 + 30;
                drawPanel.getGraphics().drawLine(x1, y1, x2, y2);
            }
            x1 = x2;
            y1 = y2;
        }
    }

    private void clearPanel() {
        drawPanel.getGraphics().clearRect(0, 0, drawPanel.getWidth(), drawPanel.getHeight());
    }
}
